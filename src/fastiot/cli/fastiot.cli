#!/usr/bin/env python

import importlib
import logging
import os

from fastiot.cli.import_configure import import_configure
from fastiot.cli.model.context import get_default_context
from fastiot.cli.typer_app import app


def _import_commands():
    for f in os.listdir(os.path.join(os.path.dirname(__file__), 'common', 'commands')):
        if f.startswith('_'):
            continue
        f, _ = os.path.splitext(f)
        mod = f'fastiot.cli.common.commands.{f}'
        try:
            importlib.import_module(mod)
        except ImportError:
            logging.exception(f"Import error raised during import of module {mod}")


def _import_plugin_commands(extensions):
    for extension in extensions:
        try:
            importlib.import_module(f'{extension}.cli.commands')
        except ImportError:
            logging.warning(f"Import error raised during import '{extension}.cli.commands from extension module "
                            f"{extension}.\n"
                            "This error will be ignored, but some cli commands may be missing.")


if __name__ == '__main__':
    # entry point for fastiot command
    logging.basicConfig(level=logging.INFO)
    default_context = get_default_context()
    default_context.project_config = import_configure()
    _import_commands()
    if default_context.project_config.extensions is not None:
        _import_plugin_commands(default_context.project_config.extensions)

    app()
